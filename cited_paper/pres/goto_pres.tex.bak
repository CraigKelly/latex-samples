% COMP 4040: Programming Languages
% Fall 2009
% Craig Kelly
% Presentation of GoTo Hell

\documentclass{beamer}
\usepackage{beamerthemeshadow}
\usepackage{amsmath}
%\mode<presentation> { \usetheme{boxes} }

\title{Goto Hell: the Need for Better Control Structures and Compilers}
\author{Craig Kelly}
\date{\today}

\begin{document}
\frame{\titlepage}
\frame{\frametitle{Table of contents}\tableofcontents}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Introduction}
    \frame{\frametitle{Thesis}
        \textbf{
        Ongoing issues with goto should be viewed as a need to improve control
        structures and compiler optimization techniques
        }
    }
    \subsection{Background}
        \frame{\frametitle{Background}
            \begin{itemize}
            \item
            The unconditional branch instruction (called the ``goto'' statement)
            has been a source of controversy for more than 30 years.

            \item
            Although the most famous pro and con opinions were written
            by Dijkstra and Knuth respectively many more articles, papers,
            and discussion have considered the issue at length.

            \item
            In 1987, more than 20 years after the arguments began,
            F. Rubin claimed that the belief that goto should be eliminated lacked
            an adequate rational foundation
            \end{itemize}
        }
    \subsection{Justification}
        \frame{\frametitle{Justification}
            \begin{itemize}
            \item
            Some of the most influential scholars in the computing field
            have published papers and articles concerned with nothing but the
            evaluation of a single small instruction common to most procedural
            languages.
            \item
            Dijkstra's ``Go to statement considered harmful'' was meant to be a
            short article in a journal, but published as a letter to the editor
            to speed publication.
            \end{itemize}
        }
        \frame{\frametitle{Practically Everywhere}
            \begin{itemize}
            \item
            The goto statement "does not appear in most formal systems of
            computability theory, but does appear in programming language
            extensions of those systems"
            \item
            The Turing machine itself has the concept of a goto statement!
            \end{itemize}
        }
        \frame{\frametitle{Required}
            Rojas demonstrated there are only four basic instructions needed
            for a von Neumann computer:
            \begin{enumerate}
                \item load
                \item store
                \item increment
                \item goto
            \end{enumerate}
        }
    \subsection{Scope of Inquiry}
        \frame{\frametitle{Scope of Inquiry}
            \begin{itemize}
            \item
            As mentioned above, goto is intrinsic to von Neumann computers and so
            much be viewed as necessary to the hardware instructions.
            \item
            Most declarative languages (such as SQL) and functional languages
            (such as Erlang) don't contain a concept related to a procedural
            branch and so are outside any scope of consideration.
            \end{itemize}
        }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Overview of Debate}
    \frame{\frametitle{Genesis}
        As a matter of history, Knuth claims that Peter Naur was the
        first to publish about ``harmful go to's''

        \begin{block}{Peter Naur said:}
        If you look carefully you will find that surprisingly often a go to statement
        which looks back really is a concealed for statement.  And you will be pleased
        to find how the clarity of the algorithm improves when you insert the for clause
        where it belongs...
        \end{block}
    }
    \frame{\frametitle{Giants}
        The most influential publications in the historical goto debate are
        \begin{itemize}
        \item Dijkstra's ``Go to statement considered harmful''
        \item Knuth's ``Structured Programming with go to Statements''
        \end{itemize}
    }
    \subsection{Dijkstra}
        \frame{\frametitle{Dijkstra was not a fan}
            Dijkstra's claimed that ``[t]he goto statement as it stands is just too primitive;
            it is too much an invitation to make a mess of ones program''
            However, much of the article is dedicated to the conceptual handicap imposed
            by a program containing goto's

            \begin{block}{Dijkstra said}
            ...our intellectual powers are rather geared to master static relations and that
            our powers to visualize processes evolving in time are relatively poorly developed.
            For that reason we should do (as wise programmers aware of our limitations) our
            utmost to shorten the conceptual gap between the static program and the dynamic
            process, to make the correspondence between the program (spread out in text space)
            and the process (spread out in time) as trivial as possible.
            \end{block}
        }
        \frame{\frametitle{Halt!}
            \begin{itemize}
            \item
            Dijkstra develops simple way of keeping enough data to restart a program
            \item
            Leavenworth pointed out that Dijkstra's argument
            can be considered in a stronger light; unrestricted goto's increase the
            difficulty of the halting problem.  If goto's are removed, ``there are only
            two ways a program may fail: either by infinite recursion, or by the repetition
            clause.''
            \end{itemize}
        }
        \frame{\frametitle{But Not Always}
            Knuth quotes personal correspondence he has with Dijkstra

            \begin{block}{Dijkstra said}
            Please don't fall into the trap of believing that I am terribly dogmatical about
            [the go to statement].  I have the uncomfortable feeling that
            others are making a religion out of it, as if the conceptual problems of
            programming could be solved by a single trick, by a simple form of coding
            discipline!
            \end{block}
        }

    \subsection{Knuth}
        \frame{\frametitle{Best of Time, Worst of Times}
            \begin{itemize}
            \item
            Knuth's argument is often seen as a counterpoint to Dijkstra -- \textbf{pro goto}
            \item
            Knuth actually favors ``the elimination of go to's in certain cases''
            \item
            Knuth does give multiple reasons when goto should be used. Leavenworth
            sums up:
            \end{itemize}
            \begin{block}{Reasons to Use Goto}
            \begin{enumerate}
                \item Synthesis of missing control structures
                \item Efficiency
                \item Abnormal Exits
            \end{enumerate}
            \end{block}
        }


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Goto Removal}
    \frame{\frametitle{Can Goto's Just be Removed?}
        \begin{itemize}
            \item
            Two years before Dijkstra's article, Jacopini had shown that goto's
            could be removed via a technique involving the transformation of flow
            diagrams
            \item
            Dijkstra also pointed out that the resulting
            program was actually less clear than the original and so was
            actually worse than a program with a goto.
            \item
            Knuth also mentions Jacopini and reports even more work by Ashcroft
            and Kosaraju
        \end{itemize}
    }
    \subsection{Kosaraju}
        \frame{\frametitle{Replacing Goto's Efficiently}
            \begin{itemize}
            \item
            Goto's could be replaced with no extra computation
            \item
            \textbf{A Catch:} The language must allow exiting an arbitrary
            number of nested loops (labeled break)
            \item
            Accomplished with many languages via function return, but that
            requires \emph{compiler inlining}
            \end{itemize}
        }
    \subsection{McCabe}
        \frame{\frametitle{Cyclomatic Complexity}
            \begin{itemize}
            \item
            Mainly thought of as a software engineering metric
            \item
            Also supplies a formal definition of a non-structured program...
            \item
            ...Which gives a working formal definition of what not to do to
            write a structured program
            \end{itemize}

            \begin{block}{McCabe says}
                A structured program can be written by not branching out of
                or into a loop, or out of or into a decision
            \end{block}
        }
    \subsection{Wulf}
        \frame{\frametitle{Goto and Bliss}
            \begin{block}{Wulf said}
            Any rational set of restrictions isequivalent to eliminating the [goto]
            construct if an adequate set of other control primitives is provided
            \end{block}

            \begin{itemize}
            \item Asks ``is it practical''?
            \item Argues that it doesn't matter!
            \item The Bliss language worked out just fine
            \end{itemize}
        }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Control Structures and Compiler Optimizations}
    \frame{\frametitle{Let's Do Better}
        \begin{itemize}
        \item
        Wulf explicitly states that we should be using better compilers if
        want more efficient programs
        \item
        Knuth theorized we might get better control structures but didn't
        think optimizing compiler were good enough (proposed ``Program
        Manipulation Systems'')
        \end{itemize}
    }
    \subsection{Control Strucures}
        \frame{\frametitle{Beyond the While Loop}
            \begin{itemize}
            \item
            Jonsson's Pancode -- adds repeat to if's and has explicit short-circuiting
            \item
            Wulf's $leave \langle label \rangle$ -- Java's labeled break statements
            \item
            Bochman's multiple loop exits -- Python's optional else clause for loops
            \end{itemize}
            Java and Python have no goto statements, but a cynic may respond that
            these languages still have efficiency problems since Python is
            interpreted and Java executes on a virtual machine.  As a result,
            compiler technology must also be considered.
        }
    \subsection{Compiler Optmizations}
        \frame{\frametitle{Need to Remove Goto's to be Efficient!}
            Much of the argument in favor of keeping goto in higher-level
            languages is based on efficiency, but many ``modern'' compiler
            techniques require removing goto's!

            \begin{itemize}
            \item Erosa -- Work on eliminating goto's for an optimizing compiler (almost equivalent)
            \item Allen -- Vectoring compiler
            \item Ammarguellat -- Parallelizing compiler
            \end{itemize}
        }
        \frame{\frametitle{Better?}
            \begin{align}
            T       &= \text{Time for program} \\
            \alpha  &= \text{Goto Removal factor (increase)} \\
            N       &= \text{Degree of parallelization} \\
            \text{Execution Time} &= \alpha T \frac{1}{N} = \frac{\alpha T}{N}
            \end{align}

            \textbf{Yes! -- as long as $N > \alpha$}
        }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\section{Conclusion}
    \frame{\frametitle{Conclusion}
        \begin{itemize}
        \item
        Those arguing for the use of goto do so almost universally on
        the basis of efficiency.
        \item
        So let's create alternatives to goto that are just as efficient
        \end{itemize}
        Which means
        \begin{itemize}
        \item
        Any situation that appears to require a goto should be considered a
        requirement for a control structure that can be used instead
        \item
        This creates an ongoing requirement to improve compiler optimizations
        so that these structures are at least as efficient as goto statements
        \end{itemize}
    }

\end{document}
